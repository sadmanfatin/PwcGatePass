package model.AM;

import com.tangosol.internal.sleepycat.je.utilint.Timestamp;

import java.text.SimpleDateFormat;

import java.util.Calendar;
import java.util.Map;

import model.AM.common.AppModule;


import model.LOV.RefGatePassLOVImpl;
import model.LOV.SourceLOVImpl;

import model.LOV.SourcesDocNoLOVImpl;

import model.VO.ExternalServerAddressVOImpl;
import model.VO.PwcDeleteBtnValidateVOImpl;

import model.VO.PwcGatePassHeaderVOImpl;

import oracle.jbo.domain.TimestampLTZ;
import model.LOV.PopulateLinesDataVOImpl;

import model.VO.PopulateSearchDataHeaderRVOImpl;
import model.VO.PopulateSearchDetailsRVOImpl;
import model.VO.PopulateSearchLinesDataRVOImpl;

import oracle.adf.share.ADFContext;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;

import javax.faces.application.FacesMessage;
import javax.faces.context.ExternalContext;
import javax.faces.context.FacesContext;

import javax.servlet.http.HttpSession;


import oracle.jbo.server.ViewObjectImpl;

import oracle.jdbc.OracleTypes;
import oracle.binding.OperationBinding;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jun 20 18:17:25 PKT 2022
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppModuleImpl extends ApplicationModuleImpl implements AppModule {
    /**
     * This is the default constructor (do not remove).
     */
    public AppModuleImpl() {
    }

    /**
     * Container's getter for PwcGatePassHeaderVO1.
     * @return PwcGatePassHeaderVO1
     */
    public PwcGatePassHeaderVOImpl getPwcGatePassHeaderVO1() {
        return (PwcGatePassHeaderVOImpl) findViewObject("PwcGatePassHeaderVO1");
    }

    /**
     * Container's getter for PwcGatePassLinesVO1.
     * @return PwcGatePassLinesVO1
     */
    public ViewObjectImpl getPwcGatePassLinesVO1() {
        return (ViewObjectImpl) findViewObject("PwcGatePassLinesVO1");
    }

    /**
     * Container's getter for PwcGatePassDetailsVO1.
     * @return PwcGatePassDetailsVO1
     */
    public ViewObjectImpl getPwcGatePassDetailsVO1() {
        return (ViewObjectImpl) findViewObject("PwcGatePassDetailsVO1");
    }

    /**
     * Container's getter for PwcGatePassHeaderLinesVL1.
     * @return PwcGatePassHeaderLinesVL1
     */
    public ViewLinkImpl getPwcGatePassHeaderLinesVL1() {
        return (ViewLinkImpl) findViewLink("PwcGatePassHeaderLinesVL1");
    }

    /**
     * Container's getter for PwcGatePassLinesDetailVL1.
     * @return PwcGatePassLinesDetailVL1
     */
    public ViewLinkImpl getPwcGatePassLinesDetailVL1() {
        return (ViewLinkImpl) findViewLink("PwcGatePassLinesDetailVL1");
    }

    public Row populateLinesData() {
        Map sessionScope = ADFContext.getCurrent().getSessionScope();
        ////System.out.println("Before Header");
        String orgId = (String)sessionScope.get("OrgId");
        //System.out.println("This org id" +orgId);
        try{
            ViewObject headervo = this.getPwcGatePassHeaderVO1();
            String gpClass = null;
            try {
                gpClass = headervo.getCurrentRow()
                                  .getAttribute("GatePassClass")
                                  .toString();
                //System.out.println("GatePassClass " + gpClass);
            } catch (Exception e) {
                e.printStackTrace();
            }
            if(gpClass.equals("Time Out"))
            {
            populateHeader();
            populateLines();
            }
            else
            {
            //System.out.println("After Header");
            //System.out.println("This org id  " +orgId);
            populateLines();
            //System.out.println("After Lines");
            }
            //System.out.println("This org id in " +orgId);
            //            vo.executeQuery();
        } catch (Exception e) {
           //System.out.println("Error");
        }
        
        return null;
    }

    public void populateLines() {

        //System.out.println("In Populate Lines");
        String gpNo = null;
        String gpClass = null;
        //        String refId = null;

        ViewObject headervo = this.getPwcGatePassHeaderVO1();
        ViewObject linevo = this.getPwcGatePassLinesVO1();
        ViewObject detvo = this.getPwcGatePassDetailsVO1();
        ViewObject populatevo = this.getPopulateSearchLinesDataRVO1();
        //System.out.println("Line count "+linevo.getRowCount());
        if(linevo.getRowCount() >= 1)
        {   
            if(detvo.getRowCount() >=1)
            {   
                try{
                    //System.out.println("Indet");
                    Row[] rows = detvo.getAllRowsInRange();
                    for (Row row : rows) {
                        row.remove();
                    }
                    //detvo.executeEmptyRowSet();
                }catch(Exception e){;
            }
            }
            try{
                                //System.out.println("line delt");
                                Row[] rows = linevo.getAllRowsInRange();
                                for (Row row : rows) {
                                    row.remove();
                                }
                                //linevo.executeEmptyRowSet();
                            }catch(Exception e){;
                        }
            //linevo.remove();
        }
        //this.getDBTransaction().commit();
        //System.out.println("Start of new creating lines");
        try {
            //System.out.println("In try");
            gpClass = headervo.getCurrentRow()
                              .getAttribute("GatePassClass")
                              .toString();
            //System.out.println("GatePassClass " + gpClass);
        } catch (Exception e) {
            // TODO: Add catch code
            //System.out.println("No Data Dound in gpClass");
            FacesMessage fm = new FacesMessage("Gate Pass Class Is Not Entered");
            fm.setSeverity(FacesMessage.SEVERITY_INFO);
            FacesContext context = FacesContext.getCurrentInstance();
            context.addMessage(null, fm);
        }
        try {
            gpNo = headervo.getCurrentRow()
                           .getAttribute("RefGatePassNo")
                           .toString();
            //System.out.println("GatePassNo " + gpNo);
        } catch (Exception e) {
            // TODO: Add catch code
            //System.out.println("No Data Dound in gpNo");
            e.printStackTrace();
        }

//        if (gpClass.equals("IGP") && linevo.getRowCount() <= 0) {
//            populatevo.setNamedWhereClauseParam("P_GPC", "OGP");
//        }
////        else if (gpClass.equals("Time Out") && linevo.getRowCount() <= 0) {
////            populatevo.setNamedWhereClauseParam("P_GPC", "OGP");
////        } 
//        else {
//            populatevo.setNamedWhereClauseParam("P_GPC", "IGP");
//        }

        populatevo.setNamedWhereClauseParam("P_GP_NO", gpNo);
        populatevo.executeQuery();
        
        RowSetIterator it = populatevo.createRowSetIterator("abc");
        int i = 0;
        while (it.hasNext()) {
            Row poprow = it.next();
            //            setpopulateLines(poprow);
            Row linerow = createLines();
            i++;
            linerow.setAttribute("LineCode", getPopulateValues(poprow, "LineCode"));
            linerow.setAttribute("DeliveryChallanNo", getPopulateValues(poprow, "DeliveryChallanNo"));
            linerow.setAttribute("Source", getPopulateValues(poprow, "Source"));
            linerow.setAttribute("SourceDocNo", getPopulateValues(poprow, "SourceDocNo"));
            linerow.setAttribute("RefLineId", getPopulateValues(poprow, "LineId"));
            linerow.setAttribute("LineCode", i);
            String lineId = getPopulateValues(poprow, "LineId");
            System.out.println("lineId " + lineId);
            this.getPwcGatePassLinesVO1().setCurrentRow(linerow);

            ViewObject DetailPopulatevo = this.getPopulateSearchDetailsRVO1();
            //            DetailPopulatevo.setNamedWhereClauseParam("P_GP_NO", gpNo);
            DetailPopulatevo.setNamedWhereClauseParam("P_REF_LINE_ID", lineId);
            DetailPopulatevo.executeQuery();
            System.out.println(DetailPopulatevo.getQuery());
            //            ViewObject vod = this.getPwcGatePassDetailsVO1();
            ViewObject vo = getPwcGatePassDetailsVO1();

            RowSetIterator deleteItr = DetailPopulatevo.createRowSetIterator("deleteItr");
            int j = 0;
            while (deleteItr.hasNext()) {
                Row Detailpoprow = deleteItr.next();
                Row detailRow = vo.createRow(); //createDetails();
                j++;
                
                try {
                    detailRow.setAttribute("ItemId", Detailpoprow.getAttribute("ItemId").toString());
                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    detailRow.setAttribute("ItemDetails", Detailpoprow.getAttribute("ItemDetails").toString());
                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    detailRow.setAttribute("ItemDesc", Detailpoprow.getAttribute("ItemDesc").toString());
                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    detailRow.setAttribute("Quantity", Detailpoprow.getAttribute("Quantity").toString());
                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    detailRow.setAttribute("Uom", Detailpoprow.getAttribute("Uom").toString());
                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    detailRow.setAttribute("RefLineId", Detailpoprow.getAttribute("DetailId").toString());
                } catch (Exception e) {
                    e.printStackTrace();
                }
                try {
                    detailRow.setAttribute("SecondaryQty", Detailpoprow.getAttribute("SecondaryQty").toString());
                } catch (Exception e) {
                    e.printStackTrace();
                }                  
//                System.out.println("SecondaryUom "+ Detailpoprow.getAttribute("SecondaryUom").toString());
//
                try {
                    detailRow.setAttribute("SecondaryUom", Detailpoprow.getAttribute("SecondaryUom").toString());
                } catch (Exception e) {
                    e.printStackTrace();
                }   
//                System.out.println("Remarks "+ Detailpoprow.getAttribute("Remarks").toString());
//                
                try {
                    detailRow.setAttribute("Remarks", Detailpoprow.getAttribute("Remarks").toString());
                } catch (Exception e) {
                    e.printStackTrace();
                }
//                try {
//                    detailRow.setAttribute("DetailId", Detailpoprow.getAttribute("DetailId").toString());
//                } catch (Exception e) {
//                    e.printStackTrace();
//                }
//                                System.out.println("Secondary Uom");
//                System.out.println("Secondary Uom"+ Detailpoprow.getAttribute("SecondaryUom").toString());
                //                detailRow.setAttribute("ItemId", getPopulateValues(Detailpoprow, "ItemId"));
                //                detailRow.setAttribute("Quantity", getPopulateValues(Detailpoprow, "Quantity"));
                //                detailRow.setAttribute("Uom", getPopulateValues(Detailpoprow, "Uom"));
            
//                System.out.println("SecondaryQty "+ Detailpoprow.getAttribute("SecondaryQty").toString());
                                             
                try {
                    detailRow.setAttribute("LineCode", i + "." + j);
                } catch (Exception e) {
                    e.printStackTrace();
                }
               
            
            }
            deleteItr.closeRowSetIterator();

            //            populateDetailsData();
            //            RowSet rvodet = (RowSet) poprow.getAttribute("PopulateSearchDetailsRVO1");
            //            while (rvodet.hasNext()) {
            //                populateDetailsData();
            //            }
            //            populatevo.setNamedWhereClauseParam("P_GP_NO", gpNo);
        }
        it.closeRowSetIterator();
        //headervo.getCurrentRow().setAttribute("GatePassClass", "Time Out");
//        getDBTransaction().commit();
        linevo.executeQuery();
        detvo.executeQuery();
//        headervo.executeQuery();
    }

    public void populateHeader() {
        String gpNo = null;
        String gpClass = null;

        ViewObject headervo = this.getPwcGatePassHeaderVO1();
//        ViewObject populateheadervo = this.getPopulateSearchDataHeaderRVO1();



//        try {
//            gpClass = headervo.getCurrentRow()
//                              .getAttribute("GatePassClass")
//                              .toString();
//            //System.out.println("GatePassClass " + gpClass);
//        } catch (Exception e) {
//            // TODO: Add catch code
//            //System.out.println("No Data Found in gpClass");
//            FacesMessage fm = new FacesMessage("Gate Pass Class Is Not Entered");
//            fm.setSeverity(FacesMessage.SEVERITY_INFO);
//            FacesContext context = FacesContext.getCurrentInstance();
//            context.addMessage(null, fm);
//        }
        try {
            gpNo = headervo.getCurrentRow()
                           .getAttribute("RefGatePassNo")
                           .toString();
            //System.out.println("GatePassNo " + gpNo);
        } catch (Exception e) {
            // TODO: Add catch code
            //System.out.println("No Data Dound in gpNo");
            e.printStackTrace();
        }

        String query = "SELECT  GPH.GATE_PASS_TYPE,           \n" + 
        "        GPH.GATE_PASS_DATE,           \n" + 
        "        GPH.GATE_PASS_NO,           \n" + 
        "        GPH.PARTY_TO_ID,           \n" + 
        "        GPH.PARTY_TO_ADDRESS,           \n" + 
        "        GPH.VEHICLE_TYPE,           \n" + 
        "        GPH.OU_ID,           \n" + 
        "        (SELECT NAME AS OPERATING_UNITS  FROM HR_OPERATING_UNITS WHERE GPH.OU_ID = ORGANIZATION_ID) OPERATING_UNIT,           \n" + 
        "        GPH.VEHICLE_NO,           \n" + 
        "        GPH.DRIVER_NAME,           \n" + 
        "        GPH.DRIVER_PHONE,           \n" + 
        "        GPH.RETURNABLE,           \n" + 
        "        GPH.IS_RETURNED,           \n" + 
        "        (SELECT PARTY_NAME    FROM HZ_PARTIES      WHERE PARTY_ID = GPH.PARTY_TO_ID) PARTY_TO           \n" + 
        "        FROM                   \n" + 
        "PWC_GATE_PASS_HEADER GPH     \n"+
        "WHERE GPH.GATE_PASS_NO = '"+gpNo+"'";
        
        //System.out.println(query);
        ViewObject populateheadervo = this.getDBTransaction().createViewObjectFromQueryStmt(query);

        //System.out.println(gpNo);
        populateheadervo.executeQuery();
        //System.out.println(populateheadervo.getQuery());
//        //System.out.println("Row Count "+populateheadervo.getRowCount());
        //System.out.println("After Row Count");

        //        RowSetIterator it = populateheadervo.createRowSetIterator("headervoIterator");
        //        while (it.hasNext()) {
        //            Row poprow = it.next();
        //            Row headerrow = createHeaderLines();

//                    try {
//                        headervo.getCurrentRow().setAttribute("GatePassClass", "Time Out");
//                        //System.out.println(headervo.getCurrentRow().getAttribute("GatePassClass"));
//                    } catch (Exception e) {
//                        // TODO: Add catch code
//                        e.printStackTrace();
//                    }
//        try {
//            headervo.getCurrentRow()
//                .setAttribute("GatePassType", populateheadervo.first().getAttribute("GatePassType"));
//            //System.out.println(populateheadervo.first().getAttribute("GatePassType"));
//        } catch (Exception e) {
//            // TODO: Add catch code
//            e.printStackTrace();
//        }
//        try {
//            headervo.getCurrentRow()
//                .setAttribute("GatePassDate", populateheadervo.first().getAttribute("GatePassDate"));
//            //System.out.println(populateheadervo.first().getAttribute("GatePassDate"));
//        } catch (Exception e) {
//            // TODO: Add catch code
//            e.printStackTrace();
//        }
//        try {
//            headervo.getCurrentRow().setAttribute("GatePassNo", populateheadervo.first().getAttribute("GatePassNo"));
//            //System.out.println(populateheadervo.first().getAttribute("GatePassNo"));
//        } catch (Exception e) {
//            // TODO: Add catch code
//            e.printStackTrace();
//        }
        try {
            headervo.getCurrentRow().setAttribute("PartyToId", populateheadervo.first().getAttribute(3));
            //System.out.println(populateheadervo.first().getAttribute("PartyToId"));
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        try {
            headervo.getCurrentRow()
                .setAttribute("PartyToAddress", populateheadervo.first().getAttribute(4));
            //System.out.println(populateheadervo.first().getAttribute("PartyToAddress"));
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        try {
            headervo.getCurrentRow().setAttribute("VehicleType", populateheadervo.first().getAttribute(5));
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        try {
            headervo.getCurrentRow().setAttribute("OuId", populateheadervo.first().getAttribute(6));
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        try {
            headervo.getCurrentRow()
                .setAttribute("OperatingUnit", populateheadervo.first().getAttribute(7));
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        try {
            headervo.getCurrentRow().setAttribute("VehicleNo", populateheadervo.first().getAttribute(8));
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        try {
            headervo.getCurrentRow().setAttribute("DriverName", populateheadervo.first().getAttribute(9));
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        try {
            headervo.getCurrentRow().setAttribute("DriverPhone", populateheadervo.first().getAttribute(10));
            //System.out.println(populateheadervo.first().getAttribute("DriverPhone"));
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        try {
            headervo.getCurrentRow().setAttribute("Returnable", populateheadervo.first().getAttribute(11));
            //System.out.println(populateheadervo.first().getAttribute("Returnable"));
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        try {
            headervo.getCurrentRow().setAttribute("IsReturned", populateheadervo.first().getAttribute(12));
            //System.out.println(populateheadervo.first().getAttribute("IsReturned"));
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        try {
            headervo.getCurrentRow().setAttribute("PartyToName", populateheadervo.first().getAttribute(13));
            //System.out.println(populateheadervo.first().getAttribute("PartyTo"));
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        //        }
        //        it.closeRowSetIterator();
//        headervo.getCurrentRow().setAttribute("GatePassClass", "Time Out");
//        getDBTransaction().commit();
//        headervo.executeQuery();
    }


    public void setpopulateLines(Row poprow) {
        //System.out.println("In setpopulateLines");

    }

    public Row createHeaderLines() {
        //System.out.println("createHeaderLines");
        ViewObject vo = getPwcGatePassHeaderVO1();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        return row;
    }

    public Row createLines() {
        //System.out.println("createLines");
        ViewObject vo = getPwcGatePassLinesVO1();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        return row;
    }

    public String getPopulateValues(Row poprow, String columnName) {
        String value = null;
        try {
            value = poprow.getAttribute(columnName).toString();
        } catch (Exception e) {
            ;
        }
        return value;
    }

    public Row populateDetailsData() {
        //        //System.out.println("In Detail Lines Data");
        //        ViewObject vod = this.getPwcGatePassDetailsVO1();
        //        Row row = vod.createRow();
        //        vod.insertRow(row);
        //        row.setNewRowState(Row.STATUS_INITIALIZED);
        populateDetails();
        //        vod.executeQuery();
        return null;
    }

    public void populateDetails() {

        //System.out.println("In Populate Details");
        String gpNo = null;
        String gpClass = null;
        String refId = null;

        ViewObject linevo = this.getPwcGatePassLinesVO1();
        ViewObject headervo = this.getPwcGatePassHeaderVO1();

        try {
            gpClass = headervo.getCurrentRow()
                              .getAttribute("GatePassClass")
                              .toString();
            //System.out.println("GatePassClass " + gpClass);
        } catch (Exception e) {
            // TODO: Add catch code
            //System.out.println("No Data Dound in gpClass");
            e.printStackTrace();
        }
        try {
            gpNo = headervo.getCurrentRow()
                           .getAttribute("RefGatePassNo")
                           .toString();
            //System.out.println("GatePassNo " + gpNo);
        } catch (Exception e) {
            // TODO: Add catch code
            //System.out.println("No Data Dound in gpNo");
            e.printStackTrace();
        }
        ViewObject populatevo = this.getPopulateSearchDetailsRVO1();
        ViewObject vod = this.getPwcGatePassDetailsVO1();

        populatevo.setNamedWhereClauseParam("P_GP_NO", gpNo);

        try {
            //            vod.getCurrentRow().setAttribute("RefLineId", refId);
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }

        RowSetIterator it = populatevo.createRowSetIterator("xyz");
        while (it.hasNext()) {
            Row poprow = it.next();
            //                    //System.out.println("Reference ID " + refId);
            setpopulateDetails(poprow);
        }
        it.closeRowSetIterator();

//        getDBTransaction().commit();
    }

    public void setpopulateDetails(Row poprow) {
        //System.out.println("In setpopulateDetails");
        Row linerow = createDetails();
        linerow.setAttribute("ItemId", getPopulateValues(poprow, "ItemId"));
        linerow.setAttribute("Quantity", getPopulateValues(poprow, "Quantity"));
        linerow.setAttribute("Uom", getPopulateValues(poprow, "Uom"));
    }

    public Row createDetails() {
        //System.out.println("createLines");
        ViewObject vo = getPwcGatePassDetailsVO1();
        Row row = vo.createRow();
        vo.insertRow(row);
        row.setNewRowState(Row.STATUS_INITIALIZED);
        return row;
    }


    /**
     * Container's getter for PopulateSearchLinesDataRVO1.
     * @return PopulateSearchLinesDataRVO1
     */
    public PopulateSearchLinesDataRVOImpl getPopulateSearchLinesDataRVO1() {
        return (PopulateSearchLinesDataRVOImpl) findViewObject("PopulateSearchLinesDataRVO1");
    }

    /**
     * Container's getter for PopulateSearchDetailsRVO1.
     * @return PopulateSearchDetailsRVO1
     */
    public PopulateSearchDetailsRVOImpl getPopulateSearchDetailsRVO1() {
        return (PopulateSearchDetailsRVOImpl) findViewObject("PopulateSearchDetailsRVO1");
    }

    /**
     * Container's getter for PopulateLinesDataVO1.
     * @return PopulateLinesDataVO1
     */
    public PopulateLinesDataVOImpl getPopulateLinesDataVO1() {
        return (PopulateLinesDataVOImpl) findViewObject("PopulateLinesDataVO1");
    }


    public void populateLinesDialogListener() {


        ViewObject hdrVO  =this.getPwcGatePassHeaderVO1();
        Row hdrRow = hdrVO.getCurrentRow();
        String approvalStatus = null;
        try{
            approvalStatus = hdrRow.getAttribute("ApproveStatusMeaning").toString();
        }catch(Exception e){
            ;    
        }
        if(approvalStatus != null && (approvalStatus.equals("Approved") || 
                                     approvalStatus.equals("Approval Inprocess"))){
            return;        
        }else{
            ViewObject vo = this.getPopulateLinesDataVO1();
            ViewObject lvo = this.getPwcGatePassLinesVO1();
            //        RowSetIterator populateLinesItr = vo.createRowSetIterator("populateLinesItr");
            Row row = null;
            String flag = null;
            Row[] rows = vo.getFilteredRows("selectFlag", "Y");
            //System.out.println("Count  " + rows.length);
            Row linesRow = null;
            int i = 0;
            for (Row r : rows) {
                linesRow = createLines();
                i++;
                linesRow.setAttribute("LineCode", lvo.getRowCount());
                try {
                    linesRow.setAttribute("Source", r.getAttribute("Source").toString());
                } catch (Exception e) {
                    ;
                }
                try {
                    linesRow.setAttribute("SourceDocNo", r.getAttribute("SourceDocNo").toString());
                } catch (Exception e) {
                    ;
                }
                try {
                    linesRow.setAttribute("DeliveryChallanNo", r.getAttribute("DeliveryChallanNo").toString());
                } catch (Exception e) {
                    ;
                }
                try {
                    linesRow.setAttribute("ShipToLocation", r.getAttribute("ShipToLocation").toString());
                } catch (Exception e) {
                    ;
                }
                lvo.setCurrentRow(linesRow);
                this.getDBTransaction().commit();
                
                
                ViewObject linesVO  =this.getPwcGatePassLinesVO1();  
                            
                String lineCodecount = null;
                try{
                    lineCodecount = linesVO.getCurrentRow().getAttribute("LineCode").toString();    
                }catch(Exception e){
                    ;
                }
                
                ViewObject yarnVO  =this.getPwcGatePassDetailsVO1();
                int detialli = yarnVO.getRowCount();
                lineCodecount = lineCodecount +"."+ ++detialli;
                
                //System.out.println("Detal Line Count " +lineCodecount);
                
                linesRow = createDetails();
                
                //linesRow.setAttribute("LineCode", i + "." + 1);
                linesRow.setAttribute("LineCode", lineCodecount);

                try {
                    linesRow.setAttribute("ItemDetails", r.getAttribute("ItemDetails").toString());
                } catch (Exception e) {
                    ;
                }
                try {
                    linesRow.setAttribute("ItemDesc", r.getAttribute("Description").toString());
                } catch (Exception e) {
                    ;
                }
                try {
                    linesRow.setAttribute("Quantity", r.getAttribute("Quantity").toString());
                } catch (Exception e) {
                    ;
                }
                try {
                    linesRow.setAttribute("Uom", r.getAttribute("Uom").toString());
                } catch (Exception e) {
                    ;
                }
                try {
                    linesRow.setAttribute("SourceId", r.getAttribute("SourceId").toString());
                } catch (Exception e) {
                    ;
                }
            }
            
            this.getDBTransaction().commit();
        }
    }


    public void popupFetchListener() {
        ViewObject vo = this.getPwcPopulateSearchVO1();
        if(vo.getRowCount() == 0){
            //System.out.println("create......");
            Row row = vo.createRow();
            vo.insertRow(row);
            row.setNewRowState(Row.STATUS_INITIALIZED);
            vo.executeQuery();    
        }else{
            //System.out.println("first......");    
            vo.first();
            vo.executeQuery();
        }
        
    }
    
    public void popupFetchListenerNew() {
        ViewObject vo = this.getPopulateLinesDataVO1();
        vo.executeQuery();
    }

    public void populateLinesDialogListenerNew(String source, String sourceDocNo) {

//        Map sessionScope = ADFContext.getCurrent().getSessionScope();
//        String orgId = (String) sessionScope.get("OrgId");
        ViewObject VO = this.getPwcGatePassHeaderVO1();
        String orgId = null; 
        try{
            orgId = VO.getCurrentRow().getAttribute("OuId").toString();    
        }catch(Exception e){
            ;    
        }
        
        //System.out.println("Source --->" + source);
        //System.out.println("Source Doc No.--->" + sourceDocNo);
        //System.out.println("Org Id  --->" + orgId);
        ViewObject populateSearchVO = this.getPopulateLinesDataVO1();
        populateSearchVO.setNamedWhereClauseParam("pSource", source);
        populateSearchVO.setNamedWhereClauseParam("pSourceDocNo", sourceDocNo);
        populateSearchVO.setNamedWhereClauseParam("pOrgId", orgId);
        populateSearchVO.executeQuery();
        //System.out.println("Row Count "+populateSearchVO.getRowCount());
        //System.out.println(populateSearchVO.getQuery());
    }

    /**
     * Container's getter for PopulateSearchDataHeaderRVO1.
     * @return PopulateSearchDataHeaderRVO1
     */
    public PopulateSearchDataHeaderRVOImpl getPopulateSearchDataHeaderRVO1() {
        return (PopulateSearchDataHeaderRVOImpl) findViewObject("PopulateSearchDataHeaderRVO1");
    }
    
    public void gateOutActionBind(){
        
        String GateOutDate = null;
        ViewObject hdrVO = this.getPwcGatePassHeaderVO1();
        java.util.Date utilDate = new java.util.Date();
        SimpleDateFormat sdf = new SimpleDateFormat((new java.sql.Timestamp(utilDate.getTime()).toString()));
        Calendar c = Calendar.getInstance();
        
        GateOutDate = sdf.format(c.getTime());             
        //System.out.println("GateOutDate.... : " + GateOutDate);
        hdrVO.getCurrentRow().setAttribute("GateOutDate", GateOutDate);
        hdrVO.getCurrentRow().setAttribute("GateOutFlag", "Y");
        hdrVO.getCurrentRow().setAttribute("TimeOutFlag", "Y");
        getDBTransaction().commit();

    }
    
    public void getParameters() {
        FacesContext fctx = FacesContext.getCurrentInstance();
        ExternalContext ectx = fctx.getExternalContext();
        HttpSession userSession = (HttpSession) ectx.getSession(false);
        String functionid = null;
        String deleteFlag = "false";
        String revisionFlag = "false";
        
        ViewObject loVO = this.getRefGatePassLOV1();

        try {
            functionid = userSession.getAttribute("FunctionId").toString();
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        
        String query =
            "SELECT PARAMETERS FROM FND_FORM_FUNCTIONS WHERE FUNCTION_NAME ='" + functionid + "'";
        //System.out.println(functionid);
        ViewObject functionVO = this.getDBTransaction().createViewObjectFromQueryStmt(query);
        functionVO.getQuery();

        String parameters = null;

        try {
            parameters = functionVO.first()
                                   .getAttribute(0)
                                   .toString();
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        if(!(parameters.equals("Time Out")))
        {
        userSession.setAttribute("gatePassClass", parameters);
            userSession.setAttribute("timeOutMode", null);
        //System.out.println(parameters);
//            if (parameters.equals("IGP")) {
//                //System.out.println("In IGP");
//                loVO.setWhereClause("TIME_OUT_FLAG = 'Y'");
//                loVO.executeQuery();
//                //System.out.println(loVO.getQuery());
//            }
        }
        else if(parameters.equals("Time Out"))
        {
            //System.out.println("IN wher time out session paarameter");
            userSession.setAttribute("timeOutMode", "Y");
            userSession.setAttribute("gatePassClass", "OGP");    

            ViewObject hdrVO = this.getPwcGatePassHeaderVO1();
//            hdrVO.setWhereClause("TIME_OUT_FLAG i");
              hdrVO.setWhereClause("APPROVAL_STATUS = 'Y' AND INTERNAL != 'Y'");
//            hdrVO.setWhereClause("APPROVAL_STATUS = " +"Y");
            hdrVO.executeQuery();
        }
        Map sessionScope = ADFContext.getCurrent().getSessionScope();
        String orgId = (String)sessionScope.get("OrgId");
        String userId = (String)sessionScope.get("UserId");
        String respId = (String)sessionScope.get("RespId");
        String respAppl = (String)sessionScope.get("RespAppId");
        //System.out.println("User Id " +userId);
        //System.out.println("Respid " +respId);
        //System.out.println("REsp APpv ID" +respAppl );
        
        userSession.setAttribute("userId", userId);
        userSession.setAttribute("orgId", orgId);
        userSession.setAttribute("respId", respId);
        userSession.setAttribute("respAppl", respAppl);
        
        ViewObject vo = this.getPwcDeleteBtnValidateVO1();
                    vo.setNamedWhereClauseParam("pLevelValue", userId);
                    vo.executeQuery();
                    //System.out.println(vo.getQuery());
                    if (vo.getRowCount() == 0) {
                        vo.setNamedWhereClauseParam("pLevelValue", respId);
                        vo.executeQuery();
                        //System.out.println("-----");
                        //System.out.println(vo.getQuery());
                        if (vo.getRowCount() == 0) {
                            vo.setNamedWhereClauseParam("pLevelValue", respAppl);
                            vo.executeQuery();
                            //System.out.println("-----");
                            //System.out.println(vo.getQuery());
                            if (vo.getRowCount() == 0) {
                                vo.setNamedWhereClauseParam("pLevelValue", 0);
                                vo.executeQuery();
                                //System.out.println("-----");
                                //System.out.println(vo.getQuery());
                            }
                        }
                    }

                    if (vo.getRowCount() > 0) {
                        try {
                            deleteFlag = vo.first()
                                           .getAttribute(0)
                                           .toString();
                            //System.out.println(deleteFlag);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }

                    userSession.setAttribute("deleteBtnFlag", deleteFlag);
                    //System.out.println("Value of the delete Button Flag is " +deleteFlag);
        
    }
    
    public void createBtnLines()
    {
        //System.out.println("Create BTN line called");
        String gpNo = null;
        String headerid = "-1";
        String Gpdaate =  "-1";
        ViewObject hdrvo = this.getPwcGatePassHeaderVO1();
        try {
            Gpdaate = hdrvo.getCurrentRow()
                        .getAttribute("GatePassDate")
                        .toString();
        } catch (Exception e) {
            Gpdaate =  "-1";
        }
            
//        this.showMessage("Please fill the above required fields to prcoeed!." +Gpdaate);
            
        if(Gpdaate.equalsIgnoreCase("-1")){
            this.showMessage("Please fill the above required fields to prcoeed!.");
            return;
        }
        
        ViewObject linesvo = this.getPwcGatePassLinesVO1();
        ViewObject detailvo = this.getPwcGatePassDetailsVO1();
        //System.out.println("Setting Disable FLag");
        hdrvo.getCurrentRow().setAttribute("DisabledFlag", null);
      //  this.getDBTransaction().commit();
        
        try {
            gpNo = hdrvo.getCurrentRow()
                        .getAttribute("GatePassNo")
                        .toString();
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        //System.out.println("Value of GPNO " +gpNo);
        
        if (gpNo == null){
            this.showMessage("GatePass No can't be null or empty while creating line! ");
            return ; 
        }
        
        
            int i = linesvo.getRowCount();
            int j = detailvo.getRowCount();
            
            //System.out.println("Value if i "+i+ "Vlaue of j "  +j);
            Row linerow = linesvo.createRow();
            linerow.setAttribute("DeliveryChallanNo", gpNo + "-" + ++i);
            linerow.setAttribute("LineCode", linesvo.getRowCount());
            //System.out.println("Creating Lines Detail");
//            Row detailrow = detailvo.createRow();
//            detailrow.setAttribute("LineCode", i + "." + ++j);
            //linerow.setAttribute("DeliveryChallanNo", gpNo + "-" + i);
            linesvo.insertRow(linerow);
        }
    
    public void populateBtnListener() {
        ViewObject hdrvo = this.getPwcGatePassHeaderVO1();
        ViewObject sourceDocVo = this.getSourcesDocNoLOV1();
        hdrvo.getCurrentRow().setAttribute("DisabledFlag", "Y");
        
        try {
            sourceDocVo.getCurrentRow().setAttribute("Source", null);
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }

        try {
            sourceDocVo.getCurrentRow().setAttribute("SourceDocNo", null);
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }


    }

    /**
     * Container's getter for SourceLOV1.
     * @return SourceLOV1
     */
    public SourceLOVImpl getSourceLOV1() {
        return (SourceLOVImpl) findViewObject("SourceLOV1");
    }

    /**
     * Container's getter for SourcesDocNoLOV1.
     * @return SourcesDocNoLOV1
     */
    public SourcesDocNoLOVImpl getSourcesDocNoLOV1() {
        return (SourcesDocNoLOVImpl) findViewObject("SourcesDocNoLOV1");
    }
    public String sendNotifyforApproval() {
            //System.out.println("a");
            Map sessionScope = ADFContext.getCurrent().getSessionScope();
            String userId = (String) sessionScope.get("UserId");

            ViewObject hdrVO = this.getPwcGatePassHeaderVO1();
            String WfApproval = "N";
            
            String hdrId = hdrVO.getCurrentRow().getAttribute("HeaderId").toString();
            //System.out.println("Header Id " + hdrId);
            //System.out.println("userId is "+userId);
            try {
                WfApproval = hdrVO.getCurrentRow().getAttribute("ApprovalStatus").toString();
            } catch (Exception e) {
                ;
            }
            //System.out.println("WfApproval is " + WfApproval);
    //        getDBTransaction().commit();
            String status = null;

            if (WfApproval.equals("N") || WfApproval == null || WfApproval.equals("R") || WfApproval.equals("U")) {
                //System.out.println("If Statement");
                String stmt = "BEGIN pwc_gp_wf_pkg.wf_gp_approval_main(:1, :2, :3,:4); end;";
                java.sql.CallableStatement cs = getDBTransaction().createCallableStatement(stmt, 4);
                try {
                    cs.registerOutParameter(4, OracleTypes.VARCHAR);
                    cs.setString(1, hdrId);
                    cs.setString(2, userId);
                    cs.setString(3, "GP");
                    cs.execute();
                    status = cs.getString(4);
                    cs.close();
                } catch (Exception e) {
                    status = e.getMessage();
                    ;
                }
    //            hdrVO.executeQuery();
                if(status.equals("Successfully Sent For Approval")){
                hdrVO.getCurrentRow().setAttribute("ApprovalStatus", 'I');
                }            
            } 
            else 
            {
                status = " Notification Approval Already Sent ";
            }
            return status;
        }
    
    public void createDeatailAL() {
            ViewObject linesVO  =this.getPwcGatePassLinesVO1();  
            
            String lineCode = null;
            try{
                lineCode = linesVO.getCurrentRow().getAttribute("LineCode").toString();    
            }catch(Exception e){
                ;
            }
            
            ViewObject yarnVO  =this.getPwcGatePassDetailsVO1();
            int i = yarnVO.getRowCount();
            Row row = yarnVO.createRow();
            lineCode = lineCode +"."+ ++i;
            row.setAttribute("LineCode", lineCode);
            yarnVO.insertRow(row);
            yarnVO.executeQuery();
        }
    
    public void SaveButtonActionListenerAM() {
        //System.out.println("Save AM listner");
        Map sessionScope = ADFContext.getCurrent().getSessionScope();
//        ViewObject HdrVo = this.getPwcGatePassHeaderVO1();
         ViewObject HdrVo = this.getPwcGatePassHeaderVO1();
            String Gtype = null;
            String ReturnedFlag1 = null;
            String ReturnedFlag2 = null;
            
            try{
                Gtype  = HdrVo.getCurrentRow().getAttribute("GatePassType").toString();
                //System.out.println("Gtype  "+Gtype);
            }catch(Exception e){
                  //System.out.println("EE");
                }
        if (Gtype.equals("Generic")) {
                
            try{
                ReturnedFlag1  = HdrVo.getCurrentRow()
                                       .getAttribute("Returnable")
                                      .toString();
                //System.out.println("Returnable1 "+ReturnedFlag1);
            }catch(Exception e){
                        //System.out.println("dd");
            }
            try{
                    ReturnedFlag2  =  HdrVo.getCurrentRow()
                                           .getAttribute("IsReturned").
                                            toString();
                }catch(Exception e){
                            //System.out.println("ddde");
                    }
            //System.out.println("In if");
            
            if(ReturnedFlag1.equals("true") || ReturnedFlag1.equals("Y")){
                //System.out.println("ReturnedFlag1 " +ReturnedFlag1);
            }
            else if(ReturnedFlag2.equals("true") || ReturnedFlag2.equals("Y")){
                //System.out.println("ReturnedFlag2 "  +ReturnedFlag2);
            }else{
                //System.out.println("IN else");
                /*   husnain remove the Mandatory field Returnable's is missing date 16-nov-2023
                this.showMessage("Mandatory field Returnable's is missing.") ;    
                return ;
            */
            }
    
        }
        String orgId = (String)sessionScope.get("OrgId");
        //System.out.println("This org id in Save action A.m " +orgId);
        this.getDBTransaction().commit();
    }
    public String SaveButtonActionListenerAM2() {
        //System.out.println("Save AM listner");
        Map sessionScope = ADFContext.getCurrent().getSessionScope();
    //        ViewObject HdrVo = this.getPwcGatePassHeaderVO1();
         ViewObject HdrVo = this.getPwcGatePassHeaderVO1();
            String Gtype = null;
            String ReturnedFlag1 = null;
            String ReturnedFlag2 = null;
            
            try{
                Gtype  = HdrVo.getCurrentRow().
                               getAttribute("GatePassType")
                              .toString();
                //System.out.println("Gtype  "+Gtype);
            }catch(Exception e){
                  //System.out.println("EE");
                }
        if (Gtype.equals("Generic")) {
                
            try{
                ReturnedFlag1  = HdrVo.getCurrentRow()
                                       .getAttribute("Returnable")
                                      .toString();
                //System.out.println("Returnable1 "+ReturnedFlag1);
            }catch(Exception e){
                        //System.out.println("dd");
            }
            try{
                    ReturnedFlag2  =  HdrVo.getCurrentRow()
                                           .getAttribute("IsReturned").
                                            toString();
                }catch(Exception e){
                            //System.out.println("ddde");
                    }
            //System.out.println("In if");
            
            if(ReturnedFlag1.equals("true")
            || ReturnedFlag1.equals("Y")
            ){
                //System.out.println("ReturnedFlag1 " +ReturnedFlag1);
            }else if(ReturnedFlag2.equals("true")
            ||ReturnedFlag2.equals("Y")
            ){
                //System.out.println("ReturnedFlag2 "  +ReturnedFlag2);
            }else{
                //System.out.println("IN else");
//                this.showMessage("Mandatory field Returnable's is missing.") ;    
//                return "Mandatory field Returnable's is missing."; 
            }
    
        }
        String orgId = (String)sessionScope.get("OrgId");
        //System.out.println("This org id in Save action A.m " +orgId);
        //this.getDBTransaction().commit();
        
        return null;
    }
    
    public void showMessage(String messageText) {
        FacesMessage fm = new FacesMessage(messageText);
        fm.setSeverity(FacesMessage.SEVERITY_ERROR);
        FacesContext context = FacesContext.getCurrentInstance();
        context.addMessage(null, fm);
    }
    
    public String AttachementActionListener (){
        String ExternalServerAddress = "";
                
                String GatePass= null;
                String trackingNo = null;
                ViewObject hdrVo = this.getPwcGatePassHeaderVO1();
                try {
                    GatePass =
                            hdrVo.getCurrentRow().getAttribute("GatePassNo").toString();
                } catch (Exception e) {
                    ;
                }
//                try {
//                    trackingNo =
//                            hdrVo.getCurrentRow().getAttribute("TrackingNo").toString();
//                } catch (Exception e) {
//                    ;
//                }

                ViewObject ESAVo = this.getExternalServerAddressVO1();
                ESAVo.executeQuery();
                ESAVo.first();

                try {
                    ExternalServerAddress =
                            ESAVo.getCurrentRow().getAttribute("CurrentValue").toString();
                } catch (Exception e) {
                    ;
                }
        String newPage = ExternalServerAddress + "/PwcFileUploading-ViewController-context-root/faces/view1?doc=GP&docNo=" + GatePass + "&formName=Gatepass";

//                         + GatePass+"&formName=TestReuest&trackingNo="+trackingNo;
         return newPage;
    }

    /**
     * Container's getter for PwcPopulateSearchVO3.
     * @return PwcPopulateSearchVO3
     */
    public ViewObjectImpl getPwcPopulateSearchVO1() {
        return (ViewObjectImpl) findViewObject("PwcPopulateSearchVO1");
    }

    /**
     * Container's getter for HeaderPopulateSearchVL2.
     * @return HeaderPopulateSearchVL2
     */
    public ViewLinkImpl getHeaderPopulateSearchVL2() {
        return (ViewLinkImpl) findViewLink("HeaderPopulateSearchVL2");
    }

    /**
     * Container's getter for RefGatePassLOV1.
     * @return RefGatePassLOV1
     */
    public RefGatePassLOVImpl getRefGatePassLOV1() {
        return (RefGatePassLOVImpl) findViewObject("RefGatePassLOV1");
    }

    /**
     * Container's getter for PwcDeleteBtnValidateVO1.
     * @return PwcDeleteBtnValidateVO1
     */
    public PwcDeleteBtnValidateVOImpl getPwcDeleteBtnValidateVO1() {
        return (PwcDeleteBtnValidateVOImpl) findViewObject("PwcDeleteBtnValidateVO1");
    }

    /**
     * Container's getter for ExternalServerAddressVO1.
     * @return ExternalServerAddressVO1
     */
    public ExternalServerAddressVOImpl getExternalServerAddressVO1() {
        return (ExternalServerAddressVOImpl) findViewObject("ExternalServerAddressVO1");
    }
}

